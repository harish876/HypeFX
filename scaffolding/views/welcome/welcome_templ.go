// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.598
package welcome

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import ()

func welcomeComponent() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\" data-theme=\"\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"description\" content=\"Go/Echo+Templ: Some Exploration for GO HTMX and Templ\"><meta name=\"google\" content=\"notranslate\"><link rel=\"shortcut icon\" href=\"/img/templ.png\" type=\"image/png\"><link rel=\"stylesheet\" href=\"/css/styles.css\"><title>Hype FX</title><script src=\"https://unpkg.com/htmx.org@1.9.9\" integrity=\"sha384-QFjmbokDn2DjBjq+fM+8LUIVrAgqcNW2s0PjAxHETgRn9l4fvX31ZxDxvwQnyMOX\" crossorigin=\"anonymous\"></script><script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script><script src=\"https://unpkg.com/hyperscript.org@0.9.12\"></script><!-- Alpine.js --><!-- Alpine Plugins --><script defer src=\"https://unpkg.com/@alpinejs/focus@3.x.x/dist/cdn.min.js\"></script><!-- Alpine Core --><script defer src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\"></script><script>\n                /* Script to toggle light and  mode */\n            </script><script src=\"/js/confirm.js\" defer></script><link rel=\"stylesheet\" href=\"/css/static.css\"></head><body hx-boost=\"true\"><layout class=\"\"><div class=\"flex justify-center mx-auto\"><section x-data=\"{ isOpen: false }\" class=\"w-full min-h-screen bg-white :bg-gray-900\"><div class=\"container relative flex flex-col min-h-screen px-6 py-8 mx-auto\"><section class=\"flex items-center flex-1\"><div class=\"flex flex-col w-full \"><h1 class=\"text-5xl font-extrabold text-center lg:text-7xl 2xl:text-8xl\"><span class=\"text-transparent bg-gradient-to-br bg-clip-text from-teal-500 via-indigo-500 to-sky-500 :from-teal-200 :via-indigo-300 :to-sky-500\">Hype</span> <span class=\"text-transparent bg-gradient-to-tr bg-clip-text from-blue-500 via-pink-500 to-red-500 :from-sky-300 :via-pink-300 :to-red-500\">FX</span></h1><p class=\"max-w-3xl mx-auto mt-6 text-lg text-center text-gray-700 :text-white md:text-xl\">CLI Tool providing a project scaffolding and a compact component library for apps written using Go, HTMX and Templ.</p></div></section></div></section></div></layout><script lang=\"js\">\n\t\t\t     document.body.addEventListener('htmx:beforeSwap', function(evt) {\n\t\t\t    if(evt.detail.xhr.status === 404){\n\t\t\t        // alert the user when a 404 occurs (maybe use a nicer mechanism than alert())\n\t\t\t        alert(\"Error: Could Not Find Resource\");\n\t\t\t    } else if(evt.detail.xhr.status === 422){\n\t\t\t        // allow 422 responses to swap as we are using this as a signal that\n\t\t\t        // a form was submitted with bad data and want to rerender with the\n\t\t\t        // errors\n\t\t\t        //\n\t\t\t        // set isError to false to avoid error logging in console\n                    alert(\"Bad Request Debug\")\n\t\t\t        evt.detail.shouldSwap = true;\n\t\t\t        evt.detail.isError = false;\n\t\t\t    } else if(evt.detail.xhr.status === 418){\n\t\t\t        // if the response code 418 (I'm a teapot) is returned, retarget the\n\t\t\t        // content of the response to the element with the id `teapot`s\n\t\t\t        evt.detail.shouldSwap = true;\n\t\t\t        evt.detail.target = htmx.find(\"#teapot\");\n\t\t\t    }\n\t\t\t});\n\t\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func Welcome() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = welcomeComponent().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
